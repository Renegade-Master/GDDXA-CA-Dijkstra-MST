SPT Structure

def __init__(self):
		self.vertex 	= []
		self.known 		= []
		self.distance 	= []
		self.via 		= []

	def setup(self,n):
		for i in range(n):
			self.vertex.append(i + 1)
			self.known.append(0)
			self.distance.append(math.inf)
			self.via.append(math.nan)

	def update(self,sel,idx,val):
		if sel == 'vtx':
			self.vertex[idx] = val
		elif sel == 'kwn':
			self.known[idx] = val
		elif sel == 'dst':
			self.distance[idx] = val
		elif sel == 'via':
			self.via[idx] = val

-------------------------------------------------
Connected[] contents after 1 pass

0	Node 1 to Node 2 with a weight of 2
1	Node 1 to Node 3 with a weight of 4
2	Node 1 to Node 4 with a weight of 1
3	Node 2 to Node 4 with a weight of 3
4	Node 2 to Node 5 with a weight of 10
5	Node 3 to Node 4 with a weight of 2
6	Node 3 to Node 6 with a weight of 5
7	Node 4 to Node 5 with a weight of 7
8	Node 4 to Node 6 with a weight of 8
9	Node 4 to Node 7 with a weight of 4
10	Node 5 to Node 7 with a weight of 6
11	Node 6 to Node 7 with a weight of 1

---Default SPT State-----------------------------

Vertex	Known	Distance	Via
1		1		0			1
2		0		∞			0
3		0		∞			0
4		0		∞			0
5		0		∞			0
6		0		∞			0
7		0		∞			0

---Middle SPT State------------------------------

NODE     TOTAL DIST      VIA
1        N/A             SELF
2        2               1
3        4               1
4        1               1
5        10              2
6        5               3
7        4               4

---Finished SPT State----------------------------

Vertex	Known	Distance	Via
1		1		0			self
2		1		2			1
3		1		3			4
4		1		1			1
5		1		8			4
6		1		6			7
7		1		5			4

-------------------------------------------------
Theory 2

look through Connected[] 
	store nodeTo for each iteration
	if nodeFrom == stored nodeTo && (Connected[nodeFrom]->weight) < (Connected[nodeTo]->weight)
		spt_vtx_

-------------------------------------------------
Theory 1

start at node 1
for x in array
	while nodeTo < x+1
		go to nodeTo; Add conn weight to total

	if total < spt.dist[x]
		spt.dist[X] == total
		spt.via[X] == nodeTo
